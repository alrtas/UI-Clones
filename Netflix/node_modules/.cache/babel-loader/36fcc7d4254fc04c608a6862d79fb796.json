{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\th052070\\\\Desktop\\\\Clones\\\\netflix-clone\\\\src\\\\components\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from '../axios';\nimport YouTube from \"react-youtube\";\nimport './Row.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoPlay: 1\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.table(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/th052070/Desktop/Clones/netflix-clone/src/components/Row.js"],"names":["React","useState","useEffect","axios","YouTube","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","opts","height","width","playerVars","autoPlay","fetchData","request","get","data","results","console","table","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAO,WAAP;;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAGA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAb,EAA4C;AAAA;;AAExC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMa,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AAERC,MAAAA,QAAQ,EAAE;AAFF;AAHH,GAAb;AASAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeiB,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAUb,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACS,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GAPQ,EAOP,CAACX,QAAD,CAPO,CAAT;AAQAgB,EAAAA,OAAO,CAACC,KAAR,CAAcf,MAAd;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAE,cAAhB;AAAA,gBACGG,MAAM,CAACgB,GAAP,CAAWC,KAAK,iBACX;AAAK,QAAA,SAAS,EAAG,eAAclB,UAAU,IAAI,kBAAmB,EAAhE;AAEI,QAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAGkB,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aAAc,EAF5E;AAGI,QAAA,GAAG,EAAEF,KAAK,CAACG;AAHf,SACSH,KAAK,CAACI,EADf;AAAA;AAAA;AAAA;AAAA,cADL;AADH;AAAA;AAAA;AAAA;AAAA,YAFJ,eAWI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEnB,UAAlB;AAA8B,MAAA,IAAI,EAAEE;AAApC;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAtCQR,G;;KAAAA,G;AAwCT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect} from 'react'\r\nimport axios from '../axios'\r\nimport YouTube from \"react-youtube\"\r\nimport './Row.css'\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n    \r\n    const [movies, setMovies] = useState([])\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            \r\n            autoPlay: 1,\r\n        },\r\n    }\r\n    \r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl)\r\n            setMovies(request.data.results)\r\n            return request\r\n        }\r\n        fetchData()\r\n    },[fetchUrl])\r\n    console.table(movies)\r\n\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n            <div className= \"row__posters\">\r\n              {movies.map(movie => (\r\n                    <img className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} \r\n                        key={movie.id}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                        alt={movie.name}\r\n                    />\r\n              ))}  \r\n            </div>\r\n            <YouTube videoId={trailerUrl} opts={opts} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row"]},"metadata":{},"sourceType":"module"}