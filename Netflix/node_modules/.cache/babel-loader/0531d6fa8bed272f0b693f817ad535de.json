{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\th052070\\\\Desktop\\\\Clones\\\\netflix-clone\\\\src\\\\components\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from '../axios';\nimport YouTube from \"react-youtube\";\nimport './Row.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoPlay: 1\n    }\n  };\n\n  const handleClick = async movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      var _trailerurl$data$resu;\n\n      let trailerurl = await axios.get(`/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`);\n      setTrailerUrl((_trailerurl$data$resu = trailerurl.data.results[0]) === null || _trailerurl$data$resu === void 0 ? void 0 : _trailerurl$data$resu.key);\n    }\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.table(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        onClick: () => handleClick(movie),\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/th052070/Desktop/Clones/netflix-clone/src/components/Row.js"],"names":["React","useState","useEffect","axios","YouTube","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","opts","height","width","playerVars","autoPlay","handleClick","movie","trailerurl","get","id","data","results","key","fetchData","request","console","table","map","poster_path","backdrop_path","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAO,WAAP;;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAGA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAb,EAA4C;AAAA;;AAExC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMa,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF;AAHH,GAAb;;AAQA,QAAMC,WAAW,GAAG,MAAOC,KAAP,IAAiB;AACjC,QAAIR,UAAJ,EAAgB;AACdC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAEO;AAAA;;AACL,UAAIQ,UAAU,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CACpB,UAASF,KAAK,CAACG,EAAG,kDADE,CAAvB;AAGAV,MAAAA,aAAa,0BAACQ,UAAU,CAACG,IAAX,CAAgBC,OAAhB,CAAwB,CAAxB,CAAD,0DAAC,sBAA4BC,GAA7B,CAAb;AACD;AACF,GATH;;AAWAxB,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeyB,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAG,MAAMzB,KAAK,CAACmB,GAAN,CAAUd,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACiB,OAAO,CAACJ,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOG,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GAPQ,EAOP,CAACnB,QAAD,CAPO,CAAT;AAQAqB,EAAAA,OAAO,CAACC,KAAR,CAAcpB,MAAd;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAE,cAAhB;AAAA,gBACGG,MAAM,CAACqB,GAAP,CAAWX,KAAK,iBACX;AAAK,QAAA,SAAS,EAAG,eAAcX,UAAU,IAAI,kBAAmB,EAAhE;AAEI,QAAA,OAAO,EAAE,MAAIU,WAAW,CAACC,KAAD,CAF5B;AAGI,QAAA,GAAG,EAAG,GAAEf,QAAS,GAAEI,UAAU,GAAGW,KAAK,CAACY,WAAT,GAAuBZ,KAAK,CAACa,aAAc,EAH5E;AAII,QAAA,GAAG,EAAEb,KAAK,CAACc;AAJf,SACSd,KAAK,CAACG,EADf;AAAA;AAAA;AAAA;AAAA,cADL;AADH;AAAA;AAAA;AAAA;AAAA,YAFJ,EAYKX,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEE;AAApC;AAAA;AAAA;AAAA;AAAA,YAZnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GAjDQR,G;;KAAAA,G;AAmDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect} from 'react'\r\nimport axios from '../axios'\r\nimport YouTube from \"react-youtube\"\r\nimport './Row.css'\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n    \r\n    const [movies, setMovies] = useState([])\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {  \r\n            autoPlay: 1,\r\n        },\r\n    }\r\n\r\n    const handleClick = async (movie) => {\r\n        if (trailerUrl) {\r\n          setTrailerUrl(\"\");\r\n        } else {\r\n          let trailerurl = await axios.get(\r\n            `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\r\n          );\r\n          setTrailerUrl(trailerurl.data.results[0]?.key);\r\n        }\r\n      };\r\n    \r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl)\r\n            setMovies(request.data.results)\r\n            return request\r\n        }\r\n        fetchData()\r\n    },[fetchUrl])\r\n    console.table(movies)\r\n\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n            <div className= \"row__posters\">\r\n              {movies.map(movie => (\r\n                    <img className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} \r\n                        key={movie.id}\r\n                        onClick={()=>handleClick(movie)}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                        alt={movie.name}\r\n                    />\r\n              ))}  \r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row"]},"metadata":{},"sourceType":"module"}